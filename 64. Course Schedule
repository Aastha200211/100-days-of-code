class Solution:
    def canFinish(self, numCourses, prerequisites):
        # Step 1: Build the graph
        graph = defaultdict(list)
        for course, pre in prerequisites:
            graph[pre].append(course)
        
        # 0 = not visited, 1 = visiting, 2 = visited
        state = [0] * numCourses
        
        def dfs(course):
            if state[course] == 1:  # visiting â†’ cycle detected
                return False
            if state[course] == 2:  # already checked
                return True
            
            state[course] = 1  # mark as visiting
            for neighbor in graph[course]:
                if not dfs(neighbor):
                    return False
            state[course] = 2  # mark as fully visited
            return True
        
        # Step 2: Check each course
        for c in range(numCourses):
            if not dfs(c):
                return False
        return True

        
