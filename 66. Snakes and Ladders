class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        n = len(board)
        
        def get_pos(num):
            r, c = divmod(num - 1, n)
            row = n - 1 - r
            col = c if r % 2 == 0 else n - 1 - c
            return row, col
            
        visited = set()
        q = deque([(1, 0)])  # (square, moves)

        while q:
            square, moves = q.popleft()
            if square == n * n:
                return moves

            for step in range(1, 7):
                next_square = square + step
                if next_square > n * n:
                    continue
                r, c = get_pos(next_square)
                if board[r][c] != -1:
                    next_square = board[r][c]
                if next_square not in visited:
                    visited.add(next_square)
                    q.append((next_square, moves + 1))

        return -1
        
