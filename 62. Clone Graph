"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return None
        
        # Dictionary to map original node -> cloned node
        clones = {}
        
        
        q = deque([node])
        
        # Create clone of the first node
        clones[node] = Node(node.val, [])
        
        # BFS traversal
        while q:
            cur = q.popleft()
            
            for nei in cur.neighbors:
                if nei not in clones:
                    # Clone neighbor if not already cloned
                    clones[nei] = Node(nei.val, [])
                    q.append(nei)
                
                # Link the current clone to the neighbor clone
                clones[cur].neighbors.append(clones[nei])
        
        return clones[node]

        
