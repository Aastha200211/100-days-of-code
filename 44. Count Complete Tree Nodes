# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def countNodes(self, root: TreeNode) -> int:
        if not root:
            return 0

        # Helper: compute tree height going leftmost
        def getLeftHeight(node):
            h = 0
            while node:
                h += 1
                node = node.left
            return h

        # Helper: compute tree height going rightmost
        def getRightHeight(node):
            h = 0
            while node:
                h += 1
                node = node.right
            return h

        left_h = getLeftHeight(root)
        right_h = getRightHeight(root)

        if left_h == right_h:
            # Perfect tree: 2^h - 1 nodes
            return (1 << left_h) - 1
        else:
            # Recurse on subtrees
            return 1 + self.countNodes(root.left) + self.countNodes(root.right)

        
